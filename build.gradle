plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.dt'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

bootJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springAiVersion', "1.0.0-M6")
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //Spring AI
    implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter'

    //Lombok
    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'

    //Amazon Web Service
    implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.4'
    implementation("io.awspring.cloud:spring-cloud-starter-aws-secrets-manager-config:2.4.4")
//    implementation group: 'org.springframework.cloud', name: 'spring-cloud-gcp-storage', version: '1.2.5.RELEASE'

    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //Junit
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    //mockitio
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    //Swagger
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0")


    //database
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    testRuntimeOnly 'com.h2database:h2'

    //test database
    testImplementation 'com.h2database:h2'


    //spring security
    implementation("org.springframework.boot:spring-boot-starter-security")

    //jwt
    implementation("io.jsonwebtoken:jjwt-api:0.12.3")
    implementation("io.jsonwebtoken:jjwt-impl:0.12.3")
    implementation("io.jsonwebtoken:jjwt-jackson:0.12.3")
    implementation 'com.nimbusds:nimbus-jose-jwt:9.37'
}

jacoco {
    toolVersion = "0.8.12"
}
jacocoTestReport {
    dependsOn test

    reports {
        html.required = true
        xml.required = false
        csv.required = false
    }

    //커버리지 측정에서 제외할 클래스
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, excludes: [
                "**/*Application*", // Spring Boot Main 클래스
                "**/config/**",      // Config 클래스
                "**/dto/**",         // DTO 클래스
                "**/Q*",             // QueryDSL QClass
                "**/*Request*",
                "**/*Response*"
        ])
    }))
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

//TODO : 차후 커버리지 80% 이상으로 설정 후 테스트 코드 작성 예정
//jacocoTestCoverageVerification {
//    dependsOn jacocoTestReport
//
//    violationRules {
//        rule {
//            enabled = true // 규칙 활성화
//            element = 'CLASS' // 검증 단위를 클래스 단위로
//
//            // 라인 커버리지가 80% 이상이어야 함
//            limit {
//                counter = 'LINE'
//                value = 'COVEREDRATIO'
//                minimum = 0.80
//            }
//
//            // 브랜치 커버리지가 80% 이상이어야 함
//            limit {
//                counter = 'BRANCH'
//                value = 'COVEREDRATIO'
//                minimum = 0.80
//            }
//
//            // 제외할 클래스 설정 (리포트 설정과 동일하게)
//            excludes = [
//                    "*.*Application",
//                    "*.config.*",
//                    "*.dto.*"
//            ]
//        }
//    }
//}
//
//// 'check' 작업 실행 시 커버리지 검증도 함께 실행
//check.dependsOn jacocoTestCoverageVerification