plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'dsko'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}


dependencies {
    //스프링 웹
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //스프링 시큐리티
    implementation 'org.springframework.boot:spring-boot-starter-security'
    //Oatuh
    implementation 'org.springframework.security:spring-security-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    //jwt
    implementation("io.jsonwebtoken:jjwt-api:0.12.3")
    implementation("io.jsonwebtoken:jjwt-impl:0.12.3")
    implementation("io.jsonwebtoken:jjwt-jackson:0.12.3")
    implementation 'com.nimbusds:nimbus-jose-jwt:9.37'

    //프로젝트 롬복
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //데이타베이스 관련 설정
    runtimeOnly 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //Spring Data Querydsl
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    //p6spy - SQL 쿼리 로깅(value가 상세히 보임)
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

    //테스트 관련 설정
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    //Swagger
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0")
}
tasks.named('test') {
    useJUnitPlatform()
}

//------------------ QueryDSL 설정 ------------------

def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

tasks.withType(JavaCompile).configureEach {
    options.generatedSourceOutputDirectory.set(querydslDir)
}

sourceSets {
    main.java.srcDirs += [querydslDir]
}

clean.doLast {
    file(querydslDir).deleteDir()
}
